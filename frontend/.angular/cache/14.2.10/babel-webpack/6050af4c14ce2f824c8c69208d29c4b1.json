{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, catchError, of } from 'rxjs';\nimport { isDevMode } from '@angular/core';\nimport { environment as DevEnv } from 'src/environments/environment';\nimport { environment as ProdEnv } from 'src/environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.url = isDevMode() ? DevEnv.BACKEND_API : ProdEnv.BACKEND_API;\n      this.user$ = new BehaviorSubject({\n        isLogged: false,\n        name: '',\n        email: ''\n      });\n    }\n\n    signup(user) {\n      return this.http.post(`${this.url}/api/users/registration`, user).pipe(catchError(err => of(err)));\n    }\n\n    signin(user) {\n      return this.http.post(`${this.url}/api/users/login`, user).pipe(catchError(err => of(err)));\n    }\n\n    setUser(loggedUser) {\n      this.user$.next({ ...loggedUser,\n        isLogged: true\n      });\n    }\n\n    logout() {\n      this.user$.next({\n        email: '',\n        isLogged: false,\n        name: ''\n      });\n    }\n\n    isLogged$() {\n      return of(true);\n    }\n\n    setNewPassword(newPassword) {\n      return this.http.patch(this.url + '/api/users/update', {\n        newPassword\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}