{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./password-form.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction PasswordFormComponent_div_3_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 11);\n  }\n\n  if (rf & 2) {\n    const passInput_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"type\", passInput_r2.hidden ? passInput_r2.type : \"text\")(\"ngClass\", ctx_r3.setInvalidClass(passInput_r2))(\"placeholder\", passInput_r2.placeholder)(\"formControlName\", passInput_r2.formControl);\n  }\n}\n\nfunction PasswordFormComponent_div_3_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 12);\n  }\n\n  if (rf & 2) {\n    const passInput_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", passInput_r2.hidden ? passInput_r2.type : \"text\")(\"placeholder\", passInput_r2.placeholder)(\"formControlName\", passInput_r2.formControl);\n  }\n}\n\nfunction PasswordFormComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, PasswordFormComponent_div_3_input_1_Template, 1, 4, \"input\", 7);\n    i0.ɵɵtemplate(2, PasswordFormComponent_div_3_ng_template_2_Template, 1, 3, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(4, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function PasswordFormComponent_div_3_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const passInput_r2 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onToggleVisibility(passInput_r2.formControl));\n    });\n    i0.ɵɵelement(5, \"i\", 10);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const passInput_r2 = ctx.$implicit;\n\n    const _r4 = i0.ɵɵreference(3);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", passInput_r2.formControl === \"confirmPassword\")(\"ngIfElse\", _r4);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", passInput_r2.hidden ? \"bi-eye\" : \"bi-eye-slash\");\n  }\n}\n\nfunction PasswordFormComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 13);\n    i0.ɵɵtext(1, \" Passed passwords differs or not filled \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let PasswordFormComponent = /*#__PURE__*/(() => {\n  class PasswordFormComponent {\n    constructor(passwordFormService) {\n      this.passwordFormService = passwordFormService;\n      this.passwordEmitter = new EventEmitter();\n    }\n\n    ngOnInit() {\n      this.passwordInputs = this.passwordFormService.getPasswordFields();\n      this.passwordForm = new FormGroup({\n        newPassword: new FormControl('', {\n          nonNullable: true,\n          validators: Validators.required\n        }),\n        oldPassword: new FormControl('', {\n          nonNullable: true,\n          validators: Validators.required\n        }),\n        confirmPassword: new FormControl('', {\n          nonNullable: true,\n          validators: [Validators.required]\n        })\n      });\n    }\n\n    comparePasswords() {\n      const {\n        confirmPassword,\n        newPassword\n      } = this.passwordForm.controls;\n      return confirmPassword.value !== '' && newPassword.value !== '' && confirmPassword.value === newPassword.value;\n    }\n\n    setInvalidClass(passInput) {\n      if (!this.comparePasswords() && this.passwordForm.controls[passInput.formControl].dirty && this.passwordForm.controls[passInput.formControl].touched) return 'is-invalid';\n      if (this.comparePasswords() && this.passwordForm.controls[passInput.formControl].dirty && this.passwordForm.controls[passInput.formControl].touched) return 'is-valid';\n      return '';\n    }\n\n    onSubmitPassword() {\n      this.passwordEmitter.emit(this.passwordForm.controls['newPassword'].value);\n    }\n\n    onToggleVisibility(control) {\n      this.passwordInputs.forEach(input => {\n        if (input.formControl === control) input.hidden = !input.hidden;\n      });\n    }\n\n  }\n\n  PasswordFormComponent.ɵfac = function PasswordFormComponent_Factory(t) {\n    return new (t || PasswordFormComponent)(i0.ɵɵdirectiveInject(i1.PasswordFormService));\n  };\n\n  PasswordFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PasswordFormComponent,\n    selectors: [[\"app-password-form\"]],\n    outputs: {\n      passwordEmitter: \"passwordEmitter\"\n    },\n    decls: 8,\n    vars: 5,\n    consts: [[1, \"px-5\", \"py-3\", 3, \"formGroup\", \"ngSubmit\"], [1, \"fs-5\", \"pb-3\", \"text-black-50\", \"justify-text\"], [\"class\", \"input-group my-3\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-danger text-center\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-center\", \"pt-4\"], [\"type\", \"submit\", 1, \"btn\", 3, \"ngClass\", \"disabled\"], [1, \"input-group\", \"my-3\"], [\"class\", \"form-control\", 3, \"type\", \"ngClass\", \"placeholder\", \"formControlName\", 4, \"ngIf\", \"ngIfElse\"], [\"AltInput\", \"\"], [\"type\", \"button\", 1, \"input-group-text\", 3, \"click\"], [1, \"bi\", 3, \"ngClass\"], [1, \"form-control\", 3, \"type\", \"ngClass\", \"placeholder\", \"formControlName\"], [1, \"form-control\", 3, \"type\", \"placeholder\", \"formControlName\"], [1, \"text-danger\", \"text-center\"]],\n    template: function PasswordFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function PasswordFormComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmitPassword();\n        });\n        i0.ɵɵelementStart(1, \"p\", 1);\n        i0.ɵɵtext(2, \" If you'd like to change a password, please assign new password below and write it once again below to confirm action. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, PasswordFormComponent_div_3_Template, 6, 3, \"div\", 2);\n        i0.ɵɵtemplate(4, PasswordFormComponent_p_4_Template, 2, 0, \"p\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n        i0.ɵɵtext(7, \" Change password \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.passwordForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.passwordInputs);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.comparePasswords() && ctx.passwordForm.controls[\"confirmPassword\"].dirty);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", ctx.comparePasswords() ? \"btn-outline-success\" : \"btn-danger\")(\"disabled\", !ctx.comparePasswords());\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\".justify-text[_ngcontent-%COMP%]{text-align:justify}\"]\n  });\n  return PasswordFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}