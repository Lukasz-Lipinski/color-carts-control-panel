{"ast":null,"code":"import { isDevMode } from '@angular/core';\nimport { BehaviorSubject, catchError, concatMap, of } from 'rxjs';\nimport { environment as DevEnv } from 'src/environments/environment';\nimport { environment as ProdEnv } from 'src/environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CreateProductService = /*#__PURE__*/(() => {\n  class CreateProductService {\n    constructor(http) {\n      this.http = http;\n      this.url = isDevMode() ? DevEnv.BACKEND_API : ProdEnv;\n      this.inputs = [{\n        name: 'name',\n        label: 'product name',\n        type: 'text'\n      }, {\n        name: 'brand',\n        label: 'brand',\n        type: 'text'\n      }, {\n        name: 'model',\n        label: 'model',\n        type: 'text'\n      }, {\n        name: 'ean',\n        label: 'ean',\n        type: 'number'\n      }, {\n        name: 'price',\n        label: 'price',\n        type: 'string'\n      }, {\n        name: 'amount',\n        label: 'amount',\n        type: 'number'\n      }];\n      this.categories = [{\n        mainCategory: 'garden',\n        subcategories: ['ladders', 'gardening tools', 'saws and chainsaws']\n      }, {\n        mainCategory: 'home',\n        subcategories: ['furniture', 'lamps', 'heating']\n      }, {\n        mainCategory: 'accessories for food',\n        subcategories: ['lunch boxes', 'bags for food', 'bags for frozen food']\n      }];\n      this.productDetails$ = new BehaviorSubject({\n        name: '',\n        brand: '',\n        ean: 0,\n        price: 0,\n        amount: 0,\n        category: '',\n        subcategory: '',\n        description: '',\n        model: ''\n      });\n      this.modal$ = new BehaviorSubject('');\n    }\n\n    getAllProducts() {\n      return this.http.get(this.url + '/api/products').pipe(concatMap(({\n        products\n      }) => {\n        return of(products);\n      }));\n    }\n\n    getCategories() {\n      return this.categories;\n    }\n\n    getFields() {\n      return this.inputs;\n    }\n\n    dispatchProductToBackend(newProduct) {\n      return this.http.post(this.url + '/api/products/add', newProduct).pipe(catchError(err => {\n        return of({\n          status: 401,\n          msg: 'Server does not respond'\n        });\n      }));\n    }\n\n    updateProduct(updatedProduct) {\n      return this.http.patch(this.url + '/api/products/update', updatedProduct);\n    }\n\n    deleteProduct({\n      id,\n      ean\n    }) {\n      return this.http.delete(this.url + '/api/products/remove', {\n        body: {\n          id,\n          ean\n        }\n      });\n    }\n\n  }\n\n  CreateProductService.ɵfac = function CreateProductService_Factory(t) {\n    return new (t || CreateProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CreateProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CreateProductService,\n    factory: CreateProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return CreateProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}